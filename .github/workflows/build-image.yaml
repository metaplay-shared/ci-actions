# This file is part of Metaplay SDK which is released under the Metaplay SDK License.

# Reusable Github Actions workflow to build the server docker image and push it into the docker repository
name: build-image

on:
  workflow_call:
    secrets:
      METAPLAY_CREDENTIALS:
        description: "Metaplay cloud machine account credentials"
        required: true

    inputs:
      organization:
        description: "Name of the organization (must match the organization in the portal)"
        required: true
        type: string
      project:
        description: "Name of the project (must match the project in the portal)"
        required: true
        type: string
      environment:
        description: "Name of the environment to deploy to (must match the environment in portal)"
        required: true
        type: string

      image-tag:
        description: "Image tag to use for the docker build"
        required: false
        type: string
        default: ${{ github.sha }}

      working-directory:
        description: "Working directory under project repository to build images in"
        required: false
        type: string
        default: .
      project-root:
        description: "Project directory path relative to docker-path without trailing slash"
        required: false
        type: string
        default: .
      sdk-root:
        description: "Metaplay SDK directory path relative to docker-path without trailing slash"
        required: false
        type: string
        default: MetaplaySDK
      backend-root:
        description: "Userland Backend directory, relative to docker-path without trailing slash"
        required: false
        type: string
        default: Backend
      shared-code-root:
        description: "Directory where shared code is located, relative to docker-path without trailing slash"
        required: false
        type: string
        default: Assets/SharedCode
      docker-path:
        description: "Docker build path relative to working-directory"
        required: false
        type: string
        default: .

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository.
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          show-progress: false # suppress the noisy progress status output

      # Install required tools
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Install metaplay-auth
      - name: Set up metaplay-auth
        run: npm install -g @metaplay/metaplay-auth

      # Login to Metaplay cloud with the machine account credentials
      - name: Login to Metaplay cloud
        env:
          METAPLAY_CREDENTIALS: ${{ secrets.METAPLAY_CREDENTIALS }}
        run: metaplay-auth machine-login

      # Build docker image for the server (also includes the botclient)
      - name: Build server image
        working-directory: ${{ inputs.working-directory }}
        run: |
          docker buildx build \
            --pull \
            --load \
            --build-arg BUILD_NUMBER=$GITHUB_RUN_NUMBER \
            --build-arg COMMIT_ID=$GITHUB_SHA \
            --build-arg SDK_ROOT=${{ inputs.sdk-root }} \
            --build-arg PROJECT_ROOT=${{ inputs.project-root }} \
            --build-arg BACKEND_DIR=${{ inputs.backend-root }} \
            --build-arg SHARED_CODE_DIR=${{ inputs.shared-code-root }} \
            -f ${{ inputs.sdk-root }}/Dockerfile.server \
            -t gameserver:${{ inputs.image-tag }} \
            .

      # Login to docker repository with credentials from metaplay-auth & push docker image
      - name: Push docker image to repository
        run: |
          eval $(metaplay-auth get-docker-login -o ${{ inputs.organization }} -p ${{ inputs.project }} -e ${{ inputs.environment }} --format env)
          echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin $DOCKER_REPO
          docker tag gameserver:${{ inputs.image-tag }} $DOCKER_REPO:${{ inputs.image-tag }}
          docker push $DOCKER_REPO:${{ inputs.image-tag }}
